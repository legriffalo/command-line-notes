#make a new folder
mkdir foldername

# copy files
cp file location

# delete files
rm filename

#rename files
mv filename newfilename

# move files
mv filename pathtodirectory
mv original path newpath

#generate file tree
find

#find a file and its path 
find -name file name

# output info using echo
echo hello bash

# create files using touch
touch questionnaire.sh

# run scripts using sh or bash
sh questionnaire.sh

bash questionnaire.sh

#locate bash 
which bash

# to make a file use bash add shebang at top of file

#!<path_to_interpreter>

# get file list using 

ls -l

Next to your file is -rw-r--r--. All but the first character (-) describe permissions different users have with the file. r means read, w means write, x means execute. I don't see an x anywhere, so nobody can execute it. Enter chmod +x questionnaire.sh in the terminal to give everyone executable permissions.

# Adding execute permissions
chmod +x questionnaire.sh


#create variable using 
VARIABLE=VALUE 
#no spaces

# access a variable using $VARIABLENAME

# Read user input to a variable using 

read VARIABLE

# use "<function> --help" , "help <function>" and "man <function>" to get help about functions





# if statement structure

if [[ CONDITION ]]
then
  STATEMENTS
else
  STATEMENTS
fi

 You can compare integers inside the brackets ([[ ... ]]) of your if with -eq (equal), -ne (not equal), -lt (less than), -le (less than or equal), -gt (greater than), -ge (greater than or equal). 

e.g check less than 5

if [[ $1 -lt 5 ]] ...rest of code



# Write multiple commands on one line using ";"

[[ 4 -ge 5 ]]; echo $?


# Check if file exists.
# then check execution status

[[ -a countdown.sh ]]; echo $?



### BASH file ./bingo.sh

#!/bin/bash

# Bingo Number Generator

echo -e "\n~~ Bingo Number Generator ~~\n"

NUMBER=$(( RANDOM % 75 + 1 ))
TEXT="The next number is, "

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
elif [[ $NUMBER -le 30 ]]
then
  echo $TEXT I:$NUMBER
elif (( NUMBER < 46 ))
then
  echo $TEXT N:$NUMBER
elif [[ $NUMBER -lt 61 ]]
then
  echo $TEXT G:$NUMBER
else
  echo $TEXT O:$NUMBER
fi


### bash file ./countdown.sh

#!/bin/bash

# Program that counts down to zero from a given argument

echo -e "\n~~ Countdown Timer ~~\n"

if [[ $1 -gt 0 ]]
then
  : '
  for (( i = $1; i >= 0; i-- ))
  do
    echo $i
    sleep 1
  done
  '

  I=$1

  while [[ $I -ge 0 ]]
  do
    echo $I
    (( I-- ))
    sleep 1
  done
else
  echo Include a positive integer as the first argument.
fi


### bash file ./fortune.sh
#!/bin/bash

# Program to tell a persons fortune

echo -e "\n~~ Fortune Teller ~~\n"

RESPONSES=("Yes" "No" "Maybe" "Outlook good" "Don't count on it" "Ask again later")
N=$(( RANDOM % 6 ))

function GET_FORTUNE() {
  if [[ ! $1 ]]
  then
    echo Ask a yes or no question:
  else
    echo Try again. Make sure it ends with a question mark:
  fi

  read QUESTION
}

GET_FORTUNE

until [[ $QUESTION =~ \?$ ]]
  do
    GET_FORTUNE again
  done

echo -e "\n${RESPONSES[$N]}"



### bash file ./questionnaire.sh

#!/bin/bash

echo -e "\n~~ Questionnaire ~~\n"

QUESTION1="What's your name?"
QUESTION2="Where are you from?"
QUESTION3="What's your favorite coding website?"

echo $QUESTION1
read NAME

echo $QUESTION2
read LOCATION

echo $QUESTION3
read WEBSITE

echo -e "\nHello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!"

 ### bash file ./five.sh

#!/bin/bash
#Program to run my other four programs

./questionnaire.sh
./countdown.sh 3
./bingo.sh
./fortune.sh
